#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      target:
        description: 'build/${target} to build'
        required: false
        default: 'r2s' #'x86_64'
      envOverride:
        description: 'key=value,key2=value2'
        required: false
        default: ''
      repo_json:
        description: 'json raw string about repo to use'
        required: false
        default: ''
      config:
        description: 'config file to build'
        required: false
        default: 'config.buildinfo'
      os:
        description: 'os to use, or self-hosted'
        required: false
        default: 'ubuntu-20.04'

env:
  FEEDS_CONF: feeds.conf.default
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  DIY_AFTER: diy-after.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai
  # DOCKER_HUB_PASS: ${{ secrets.DOCKER_PASS }}
  # ALIUNCS_PASS: ${{ secrets.DOCKER_PASS }}
  NOT_PUSH: ${{ secrets.NOT_PUSH }}
  envOverride: ${{ github.event.inputs.envOverride }}

jobs:
  set_matrix:
    runs-on: ${{ github.event.inputs.os }}
    outputs:
      build_repo: ${{ steps.set_matrix.outputs.matrix }}
      #event_inputs_json: ${{ steps.set_matrix.outputs.matrix }}
    name: "set matrix for: ${{ github.event.inputs.target }}"

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: prinf info
      id: set_matrix
      run: |
        echo '${{ toJson(github) }}'
        pwd # /home/runner/work/Actions-OpenWrt/Actions-OpenWrt
        ls -l
        echo config: ${{ github.event.inputs.config }}
        if [ -z "${{ github.event.inputs.repo_json }}" ] ;then
          bash build/${{ github.event.inputs.target }}/set_matrix.sh
        else # [{"name":"openwrt","branch":"master","addr":"https://github.com/openwrt/openwrt"}]
          echo '::set-output name=matrix::${{ github.event.inputs.repo_json }}'
        fi

    - name: prinf set_matrix
      run: |
        echo '${{ steps.set_matrix.outputs.matrix }}'

  build:
    needs: set_matrix
    runs-on: ${{ github.event.inputs.os }}
    outputs:
      imageBuilder: ${{ steps.organize.outputs.imageBuilder }}
      build_target: ${{ steps.organize.outputs.build_target }}
    name: "编译 ${{matrix.target}}: ${{matrix.repo.name}}-${{matrix.repo.branch}}"
    strategy:
      fail-fast: false
      matrix:
        target: 
          - "${{ github.event.inputs.target }}"
        repo: ${{ fromJson(needs.set_matrix.outputs.build_repo) }}

    steps:
    - name: Checkout
      uses: actions/checkout@main

    # - name: install docker
    #   uses: docker-practice/actions-setup-docker@master
      
    # - name: Login to Docker Hub
    #   uses: docker/login-action@v2
    #   env:
    #     DOCKER_PASS: ${{ secrets.DOCKER_HUB_PASS  }}
    #   if: env.DOCKER_PASS != ''
    #   with:
    #     username: ${{ github.repository_owner }}
    #     password: ${{ secrets.DOCKER_HUB_PASS }}

    # - name: Login to registry.aliyuncs.com
    #   uses: aliyun/acr-login@v1
    #   env:
    #     DOCKER_PASS: ${{ secrets.ALIUNCS_PASS  }}
    #   if: env.DOCKER_PASS != ''
    #   with:
    #     login-server: https://registry.aliyuncs.com
    #     username: "${{ github.repository_owner }}@qq.com"
    #     password: "${{ secrets.ALIUNCS_PASS }}"

    - name: prinf machine info and matrix info
      run: |
        uname -a
        cat /etc/os-release
        df -h
        lscpu
        free -h
        echo 'target: ${{ matrix.target }} ${{ toJSON(matrix.repo) }}'
        # 移动 $target ，后续步骤不记得不需要用 build/${{ github.event.inputs.target }}
        mv build/${{ github.event.inputs.target }}/* ${GITHUB_WORKSPACE}/
        mv ${GITHUB_WORKSPACE}/build/common ${GITHUB_WORKSPACE}/

        echo "build_target=${{ github.event.inputs.target }}" >> $GITHUB_ENV

        if [ "${{ github.event.inputs.os }}" != 'self-hosted' ];then
          if [ "${GITHUB_REF##*/}" = 'test' ] && [ "$(LANG=en_US.UTF-8 lscpu | awk '$1=="CPU"&&$2=="MHz:"{print int($3)}')" -le 2500 ];then
            hour_num=$(TZ=Asia/Shanghai date '+%H')
            # TODO
            # 白天频率太小不执行，晚上可以定时任务执行
            if [ "${{ github.repository_owner }}" = zhangguanzhang ] && [ $hour_num -ge 9 ];then
              # 多个 matrix repo 编译无视频率
              if [ -z "${{ github.event.inputs.repo_json }}" ] && ! grep -Pq '^\s*[^#]+?\},\{' ${GITHUB_WORKSPACE}/set_matrix.sh;then
                echo "cpu 频率太小，不执行"
                exit 233
              fi
            fi
          fi
        fi

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |

        sudo mkdir -p /workdir 
        sudo chown $USER:$GROUPS /workdir
        git config --global user.email "action@github.com" && git config --global user.name "GitHub Action"

        # $target/init_runner.sh 设置 runner 的基础设置
        if [ -f "init_runner.sh" ];then
            bash init_runner.sh
        else
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | \
            sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          if [ "${{ github.event.inputs.os }}" != 'self-hosted' ];then
            sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          fi
          sudo -E apt-get -qq update
          #sudo apt-cache search lib32gcc1
          sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004 | sed -r 's/lib32gcc1\S*//') \
              zstd upx jq pv ccache gh $(sudo apt-cache search lib32gcc1 | awk 'NR==1{if($1=="lib32gcc1"){print $1}else{print "lib32gcc-s1"}}')
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"

          # install github cli tool
          # gh 的 cli 用于构建缓存存储，这里加 env 判断防止 fork 的人不知道怎么设置而构建失败
          if [ -n "${{ secrets.gh_token }}" ];then
            gh --version
            echo ${{ secrets.gh_token }} | gh auth login --with-token
          fi
        fi

        git clone https://github.com/openwrt-dev/po2lmo.git
        pushd po2lmo
        make && sudo make install
        popd
        rm -rf po2lmo

        # 设置一些 condition 给后续步骤作为判断条件或者执行的值
        bash common/env.sh
        echo 'build_target=${{ needs.build.outputs.build_target }}' >> $GITHUB_ENV
        # name-branch-target
        echo "cache_name=$( echo ${{ matrix.repo.name }}-${{ matrix.repo.branch }}-${{ matrix.target }} | awk -F/ '{print $NF}' )" >> $GITHUB_ENV

    - name: Clone source code
      working-directory: /workdir
      run: |
        set -x
        df -hT $PWD
        if [ "$UseCache" = true -a -n "${{ secrets.gh_token }}" ];then
            gh release -R ${GITHUB_REPOSITORY} list | grep -Ew cache || gh release -R ${GITHUB_REPOSITORY} create cache -t '' -n ''
            gh release -R ${GITHUB_REPOSITORY} view cache 2>/dev/null | grep -Po 'asset:\s+\K\S+' > /tmp/log || true
            if grep -E "${cache_name}.img.zst" /tmp/log;then
              echo 'start download cache:' `grep -E "${cache_name}.img.zst" /tmp/log`
              # TODO
              # 有小几率会下载失败
              gh release -R ${GITHUB_REPOSITORY} download cache -p "${cache_name}.img.zst.*"
              # for i in `seq -w 15`
              # do
              #   curl -fsL https://github.com/$GITHUB_REPOSITORY/releases/download/cache/${cache_name}.img.zst.$i >> ${cache_name}.img.zst || break
              # done
              if cat ${cache_name}.img.zst.* | zstdmt -d -o ${GITHUB_WORKSPACE}/${cache_name}.img;then
                rm -f ${cache_name}.img.zst.*
              else
                # 缓存文件损坏
                rm -f ${cache_name}.img*
                echo "缓存文件损坏"
              fi
            fi
        fi
        if [ ! -f "${GITHUB_WORKSPACE}/${cache_name}.img" ];then
          truncate -s 33g ${GITHUB_WORKSPACE}/${cache_name}.img && mkfs.btrfs -M ${GITHUB_WORKSPACE}/${cache_name}.img
          echo "CACHE=false" >> $GITHUB_ENV
        else
          echo "CACHE=true" >> $GITHUB_ENV
        fi
        LOOP_DEVICE=$(losetup -f) && echo "LOOP_DEVICE=$LOOP_DEVICE" >> $GITHUB_ENV
        sudo losetup -P --direct-io $LOOP_DEVICE ${GITHUB_WORKSPACE}/${cache_name}.img

        # https://forum.openwrt.org/t/using-precompiled-toolchain/87446/6
        # 直接缓存所有目录得了
        #mkdir -p cache/{build_dir,staging_dir,tmp} openwrt/{build_dir,staging_dir,tmp}

        mkdir openwrt && sudo mount -o nossd,compress=zstd $LOOP_DEVICE openwrt
        # 有些特殊设备单独自己维护缓存和没缓存的目录准备工作
        if [ -f "${GITHUB_WORKSPACE}/clone.sh" ];then
            bash ${GITHUB_WORKSPACE}/clone.sh
        else
            if [ -d 'openwrt/.git' ]; then
              cd openwrt
              rm -f zerospace
              git config --local user.email "action@github.com" && git config --local user.name "GitHub Action"
              git fetch && git reset --hard origin/${{ matrix.repo.branch }} && git clean -df
            else
              sudo chown $USER:$(id -gn) openwrt && git clone -b ${{ matrix.repo.branch }} --single-branch ${{ matrix.repo.addr }} openwrt
            fi
            ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
            echo "BaseDir=/workdir/openwrt" >> $GITHUB_ENV
        fi
        if [ "${{ github.event.inputs.os }}" == 'self-hosted' ];then
          sudo chown -R $USER:$(id -gn) /workdir/openwrt 
        fi
        cd ${BaseDir}
        readlink -f $GITHUB_WORKSPACE/openwrt
        ls -l . $GITHUB_WORKSPACE/ $GITHUB_WORKSPACE/openwrt/

        echo "repo_name=${{ matrix.repo.name }}" >> $GITHUB_ENV

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        if [ -f "$DIY_P1_SH" ];then
          chmod +x $DIY_P1_SH
          cd openwrt
          echo "Start Running: $DIY_P1_SH"
          $GITHUB_WORKSPACE/$DIY_P1_SH
        fi

    - name: Update feeds
      if: env.UdateFeeds == 'true'
      run: |
        cd openwrt
        awk '$1!~"#"{print $2}' feeds.conf.default | while read dir;do
            if [ -d feeds/${dir}/.git ];then
                pushd feeds/${dir}
                #[ -n "$(git diff --name-only)" ] && git reset --hard HEAD
                git restore .
                popd
            fi
        done
        ./scripts/feeds update -a

    - name: Install feeds
      if: env.InstallFeeds == 'true'
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        
        [ -e files ] && mv files openwrt/files
        export CONFIG=${{ github.event.inputs.config }}
        echo "use the .config file:" "${CONFIG}"
        \cp config/${CONFIG} openwrt/.config
        cd openwrt
          if [ -f "$GITHUB_WORKSPACE/delete.list" ];then
            grep -Pv '^\s*#' $GITHUB_WORKSPACE/delete.list | while read dir;do
              echo "查找移除目录：$dir"
              find -name $dir -exec rm -rf {} \; || true
            done
          fi

          if [ "$UdateFeeds" = true ];then
              # 添加的 feeds 应用包优先于自带的 feed 里的 app
              echo "重复的包检测：👇"
              ./scripts/feeds list  | awk '{if(a[$1]){print $1}else{a[$1]++}}'
              echo "重复的包检测：👆"
              ./scripts/feeds list  | awk '{if(a[$1]){print $1}else{a[$1]++}}' | while read pkg_name;do
                  # 目录是 / 分隔，feeds/xxx/ 一样就不打印
                  find feeds/ -maxdepth 4 -type d -name $pkg_name | \
                    awk -F/ 'NR==1{a[$2]=$0};NR==2{if(!a[$2]){for(i in a){if(a[i]){printf "%s/ %s\n",$0,a[i]}}}}' | \
                    xargs -r -n2 echo  👉 rsync -av --delete
                  find feeds/ -maxdepth 4 -type d -name $pkg_name | \
                    awk -F/ 'NR==1{a[$2]=$0};NR==2{if(!a[$2]){for(i in a){if(a[i]){printf "%s/ %s\n",$0,a[i]}}}}' | \
                    xargs -r -n2 rsync -av --delete
          done
        fi
        cd -

        set -x

        # feeds 后做些修改
        chmod +x $DIY_P2_SH
        pushd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        popd

        # 有缓存存在才构建 imageBuilder，否则第一次生成缓存可能会很久甚至失败，此刻构建 imageBuilder 没有意义
        if grep -Eq '^CONFIG_IB=y'  openwrt/.config;then
            echo 'USED_CONFIG_IB=true'  >> $GITHUB_ENV
            echo 'MAKE_OPTS=IGNORE_ERRORS=1' >> $GITHUB_ENV
            if [ "$CACHE" == true ];then
            # 缓存存在下，slim 和 full 版本的准备行为
                pushd openwrt
                sed_num=$( grep -n '$(TOPDIR)/.config' target/imagebuilder/Makefile | cut -d: -f1 )
                # hack imageBuilder 构建出来带 *.buildinfo 和 files/
                sed -ri ${sed_num}'{s#cp#& -a $(TOPDIR)/files $(TOPDIR)/*.buildinfo#;s#.config$##;}' target/imagebuilder/Makefile

                #if [ "${{ matrix.repo.name }}" == lede ] || [ "${{ matrix.repo.name }}" == immortalwrt ];then
                # 可能
                if true;then
                  find package/ -type d -name luci-app-* | awk -F/ '{printf "CONFIG_PACKAGE_%s=m\n",$NF}' | sort >> .config
                  # TODO 查找更多的 app 包，但是不知道容量能撑住不 find  -type d -name luci-app-* | awk -F/ '!a[$NF]++{print $NF}'
                  # find -type d -name luci-app-* | awk -F/ '!a[$NF]++{printf "CONFIG_PACKAGE_%s=m\n",$NF}'| sort >> .config
                  # 主题不在 package 里，
                  find feeds/ -type d -name luci-theme-* | awk -F/ '!a[$NF]++{printf "CONFIG_PACKAGE_%s=m\n",$NF}' | sort >> .config
                fi

                # 去重，如果 make defconfig 时候.config 里不是后面值覆盖前面的值，那就需要提前删掉 .config 里的 luci-app* 
                find feeds -type d -name 'luci-app-*' | awk -F'/' '!a[$NF]++{print $NF}'  | \
                  sort | xargs -n1 -i echo CONFIG_PACKAGE_{}=m >> .config
                
                sed -ri 's#(^CONFIG_PACKAGE_luci-app-[^A-Z]*=)y#\1m#' .config
                # 下面这样太多包参与编译了，action 会超时，只像上面开启 luci-app-*
                #sed -ri '/CONFIG_PACKAGE_[0-9a-z-]+(=| )/{s@^#\s+@@;s@(=y|\s+is not set)@=m@}' .config
                popd
            else # 
                true
            fi
        else # 没开 imageBuilder 
            echo 'USED_CONFIG_IB=false'  >> $GITHUB_ENV
            echo 'MAKE_OPTS=' >> $GITHUB_ENV
        fi

        # common目录的 common docker last
        cp common/*.buildinfo openwrt/
        rm -f openwrt/disable.buildinfo
        # ${target}/config/last.buildinfo 放最后面
        [ -f config/last.buildinfo ] && cat config/last.buildinfo >> common/disable.buildinfo

        [ "$EnableDocker" != 'true' ] && rm -f openwrt/docker.buildinfo
        cat openwrt/*.buildinfo >> openwrt/.config
        # 最后写入 last，理论上能覆盖掉前面的一些开启
        # 2022/06/17 测试，前面=y 后面 is noet set 还是开启的
        # TODO 
        # 后续要处理下这块
        cat common/disable.buildinfo >> openwrt/.config
        cp common/disable.buildinfo  openwrt/

        # 保留一个原来副本，后续 full 使用
        \cp config/${CONFIG} openwrt/config.buildinfo

        if grep -Eq '^CONFIG_IB=y' openwrt/.config && [ "$CACHE" == true ];then
          \cp openwrt/.config openwrt/full.buildinfo
        fi
        pushd openwrt
        sed -ri '/luci-app-.+?_dynamic=m/s#=m#=y#' .config
        make defconfig && sed -i -E 's/# (CONFIG_.*_COMPRESS_UPX) is not set/\1=y/' .config && make defconfig

    - name: cat .config part1
      run: |
        cd openwrt
        cat .config

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        if [ "$MakeDownload" == true ];then
          # 防止缓存了老版本的包
          rm -rf dl/go-mod-cache
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
        fi
        ls -al ${BaseDir}

    - name: Upload buildInfo
      uses: actions/upload-artifact@main
      if: '!cancelled()'
      with:
        name: openwrt-buildInfo${{ env.DEVICE_NAME }}-${{ env.cache_name }}-${{ env.GITHUB_RUN_NUMBER }}
        # https://github.com/actions/upload-artifact/issues/92
        path: |
          ${{ env.BaseDir }}/.config
          ${{ env.BaseDir }}/*.buildinfo

    - name: cat .config before compile
      run: |
        cd openwrt
        cat .config

    - name: Compile the firmware
      id: compile
      run: |
        ulimit -SHn 65000
        cd openwrt

        # 注入几个变量，给升级脚本做判断使用
        release_file=$( find package/base-files -type f -name openwrt_release )
        echo "release_file path: $release_file"
        # ${{matrix.target}}: ${{matrix.repo.name}}-${{matrix.repo.branch}}
        echo "MATRIX_TARGET='${{matrix.target}}'" >> $release_file
        echo "MATRIX_REPO_NAME='${{matrix.repo.name}}'" >> $release_file
        echo "MATRIX_REPO_BRANCH='${{matrix.repo.branch}}'" >> $release_file

        echo -e "$(nproc) thread compile"
        if [ -n "${{ secrets.gh_token }}" -a "${AutoBuildTimeOut}" == true ] ;then
          createdAt=$(gh -R ${GITHUB_REPOSITORY}  run list --json databaseId,createdAt --jq ".[]|select(.databaseId==${{ github.run_id }})|.createdAt")
          echo "createdAt=$createdAt" >> $GITHUB_ENV
          usedSec=$(( `date +%s` - `date -d "$createdAt" +%s`  ))
          # 6小时超时，减去上传 cache 预留的 20 分钟后的时间作为 timeout 时间
          timeoutSec=$(( 6*60*60 - 20*60 - $usedSec  ))
          # 初次没缓存用 timeout 后防止超时 action ，后面会上传缓存目录
          echo timeout $timeoutSec make -j$(nproc) $MAKE_OPTS
          timeout $timeoutSec make -j$(nproc) $MAKE_OPTS |& tee -a /tmp/build.log
          # timeout 超时是 124 返回码，这里直接关键字匹配做详细信息的 make
          if grep -qw 're-run make' /tmp/build.log;then
            echo 'failed: try to V=s'
            make -j1 || make -j1 V=s
          fi
        else
          make -j$(nproc) || make -j1 || make -j1 V=s
        fi
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 ./build_dir
        du -h --max-depth=1 ./bin

        echo "DEVICE_NAME=${{ matrix.target }}" >> $GITHUB_ENV


    - name: retry with V=s in failed packages
      if: (!cancelled())
      run: |
        cd openwrt
        # 编译时间很早完成的话，make -v 看下 ERROR: package/feeds/routing/cjdns failed to build. 的编译错误信息
        if [ -n "${{ secrets.gh_token }}" ];then
          usedSec=$(( `date +%s` - `date -d "$createdAt" +%s`  ))
          # 小于 5 小时构建完，此刻单独构建失败的
          if [ $usedSec -lt $((4*60*60)) ];then
            for pkg in `grep -Po 'ERROR:\s+\K\S+' /tmp/build.log`;do
                echo "开始单独尝试 make $pkg/compile V=s 编译查看详细信息"
                make $pkg/compile V=s || true
            done
          fi
        fi

    - name: Check space usage
      if: (!cancelled())
      run: |
        df -hT
        df -i
        ls -la openwrt/
        #ls -lh openwrt/bin/targets/*/* # 有时候是目录 openwrt/bin/targets/*
        # 所以用下面定位目录
        ls -lh $(dirname $(find openwrt/bin/targets/ -type d -name packages ))
        if [ -f diy-after-compile.sh ];then
          bash diy-after-compile.sh
        fi

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin_${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |

        sha256_path=$(find openwrt/bin/targets/ -type f -name sha256sums )
        if [ -n "$sha256_path" ];then
          cd $(dirname $sha256_path)
          pwd
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          # 有固件生成，则上传
          if [ `find -type f -size +5M | grep -Ev 'openwrt-imagebuilder' |wc -l` -ne 0 ];then
            echo "::set-output name=status::success"
            echo "success build"
          fi

          # 下面 outputs 是后面上传 imageBuidler 的判断条件和名字
          if ls *-imagebuilder-* &>/dev/null;then
            # # 避免以后其他的 repo 构建的默认就带 imagebuilder，例如 sft1200。上传 imageBuilder 但是不给后续的 slim/full 执行
            echo "::set-output name=uploadImageBuilder::true"
            if [ "$USED_CONFIG_IB" == true ];then
                echo "::set-output name=imageBuilder::openwrt-imagebuilder-${{ env.DEVICE_NAME }}-${{ matrix.repo.name }}-${{ matrix.repo.branch }}"
            fi
          else
            echo "no_imageBuilder=true" >> $GITHUB_ENV
          fi
          echo "::set-output name=build_target::${{ matrix.target }}"
        fi

    - name: Do something after Compile
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt
        if [ -f "$GITHUB_WORKSPACE/$DIY_AFTER" ] && [ "$no_imageBuilder" = true ] ;then
          bash $GITHUB_WORKSPACE/$DIY_AFTER
        fi

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with: # 上传固件
        name: OpenWrt_firmware_${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}-${{ matrix.repo.name }}-${{ matrix.repo.branch }}
        path: |
          ${{ env.FIRMWARE }}
          !${{ env.FIRMWARE }}/openwrt-imagebuilder*

    - name: Upload imagebuilder tar.xz
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.uploadImageBuilder && !cancelled()
      with: # 上传 imageBuilder
        name: openwrt-imagebuilder-${{ env.DEVICE_NAME }}-${{ matrix.repo.name }}-${{ matrix.repo.branch }}
        path: ${{ env.FIRMWARE }}/*-imagebuilder*

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Clean space for upload cache
      id: up_cache_before
      if: "!cancelled() && env.ClearPkg == 'true'"
      continue-on-error: true
      run: |
        sync
        sha256_path=$(find openwrt/bin/targets/ -type f -name sha256sums )
        if [ -n "$sha256_path" ];then
          pushd $(dirname $sha256_path)
          if ls *-imagebuilder-* &>/dev/null;then
            # 有 imagebuilder下，清理下，防止此步上传超时
            rm -rf openwrt-*
          fi
          popd
        fi

        nohup sh -c '
        echo "Listing 100 largest packages"
        dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
        df -h
        echo "Removing large packages"
        sudo apt-get remove -y '^ghc-8.*' || true
        sudo apt-get remove -y '^dotnet-.*' || true
        sudo apt-get remove -y '^llvm-.*' || true
        sudo apt-get remove -y 'php.*' || true
        sudo apt-get remove -y azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel || true
        sudo apt-get autoremove -y || true
        sudo apt-get clean || true
        df -h
        df -i
        ' &
    - name: Upload cache to release
      id: up_cache
      if: '!cancelled()'
      continue-on-error: true
      run: |

        if [ "${UseCache}" == true -a -n "${{ secrets.gh_token }}" ];then
          set -x
          # TODO
          # 可以在目录里在文件 env 里写入时间，然后在 compile 之前，如果文件时间比当前时间差距大于2天，则删除 dl/go-mod-cache
          rm -rf openwrt/{bin,tmp,files}
          #sudo umount openwrt/{build_dir,staging_dir,tmp} cache
          # https://unix.stackexchange.com/questions/18048/list-only-bind-mounts
          # for path in `sudo findmnt --kernel -n --list | grep '\[' | awk -vWorkDir="$GITHUB_WORKSPACE"  '($2 ~ WorkDir"/cache/" && $1 ~ WorkDir"/openwrt/"){print $1}'`;do
          #   sudo umount $path
          # done
          # sudo umount cache
          sleep 1
          sudo mount -o remount,compress=no,nodatacow,nodatasum  /workdir/openwrt #openwrt
          # https://github.com/klever1988/nanopi-openwrt/issues/1158
          # pv /dev/zero > openwrt/zerospace || true
          sync
          rm -f openwrt/zerospace || true
          sleep 5
          if command -v lsof 1>/dev/null;then
            echo '检测挂载点是否有进程占用'
            sudo lsof /workdir/openwrt || true
          fi
          sudo umount -f /workdir/openwrt #openwrt
          sleep 2
          # sudo losetup -l -O NAME -n | awk '$0~"/'${cache_name}'.img"{print $1}' | xargs -r sudo losetup -d
          sudo losetup -l -O NAME -n | grep -Eqw $LOOP_DEVICE && sudo losetup -d $LOOP_DEVICE
          # 偶尔消失，所以上面的判断
          #sudo losetup -d $LOOP_DEVICE
          sync
          zstdmt -c --long ${cache_name}.img | split --numeric=1 -b 2000m - ${cache_name}.img.zst.
          ls -l
          rm -f ${cache_name}.img # 减少容量
          # 可能存在当前上传的切割文件数量少于 cache release 上的，需要提前删除
          gh release -R ${GITHUB_REPOSITORY} view cache  2>/dev/null | grep -Po "asset:\s+\K${cache_name}.img.zst.\d+" | \
              xargs -r -n1 gh release -R ${GITHUB_REPOSITORY} delete-asset cache  -y
          gh release -R ${GITHUB_REPOSITORY} upload cache ${cache_name}.img.zst.* --clobber

          echo '${{ toJson(github.event.inputs) }}' > /tmp/test
          # 缓存损坏或者初次缓存的时候，开启了 IB
          # 则再次 run 本次参数的 workflow
          if [ "${CACHE}" = false -a "${USED_CONFIG_IB}" = true ];then
            workFlow=$( echo  ${{ github.event.workflow }} | sed -r 's#.github/workflows/##')
            cat /tmp/test | gh workflow run $workFlow --json
            rm -f /tmp/test
          fi

          if [ "${{ github.event.inputs.os }}" = 'self-hosted' ];then
            gh auth logout 
          fi
        fi

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_slim:
    needs: [set_matrix, build]
    if: needs.build.outputs.imageBuilder
    runs-on: ${{ github.event.inputs.os }}
    name: "${{ needs.build.outputs.build_target }}: ${{matrix.repo.name}}-${{matrix.repo.branch}} - ${{matrix.target}}"
    strategy:
      fail-fast: false
      matrix:
        target: 
          - "slim"
          - "full"
        repo: ${{ fromJson(needs.set_matrix.outputs.build_repo) }}
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: install docker
      uses: docker-practice/actions-setup-docker@master
      
    - name: prinf info
      run: |
        df -h
        lscpu
        free -h
        #                   slim/full
        echo 'target: ${{matrix.target}}' 'repo: ${{ toJSON(matrix.repo) }}'
        pwd
        ls -l . ${GITHUB_WORKSPACE}/

    - name: Initialization environment
      id: init
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        if [ "${{ github.event.inputs.os }}" != 'self-hosted' ];then
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        fi
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | \
          sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install git gh gawk unzip patch autoconf automake upx wget curl rsync jq rename 
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        docker info

        # install github cli tool
        # 上传到latest分支
        if [ -n "${{ secrets.gh_token }}" ];then
          gh --version
          echo ${{ secrets.gh_token }} | gh auth login --with-token
          echo "::set-output name=gh::success"
        fi

        echo "DEVICE_NAME=${{ needs.build.outputs.build_target }}" >> $GITHUB_ENV

        cp -a build/${{ needs.build.outputs.build_target }}/* ${GITHUB_WORKSPACE}/
        cp -a build/common ${GITHUB_WORKSPACE}/
        # 设置一些给后续步骤作为判断条件或者执行的值
        bash common/env.sh

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      env:
        DOCKER_PASS: ${{ secrets.DOCKER_HUB_PASS  }}
      if: env.DOCKER_PASS != ''
      with:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.DOCKER_HUB_PASS }}

    - name: Login to registry.aliyuncs.com
      uses: aliyun/acr-login@v1
      env:
        DOCKER_PASS: ${{ secrets.ALIUNCS_PASS  }}
      if: env.DOCKER_PASS != ''
      continue-on-error: true
      with:
        login-server: https://registry.aliyuncs.com
        username: "${{ github.repository_owner }}@qq.com"
        password: "${{ secrets.ALIUNCS_PASS }}"

    - name: Download imagebuilder (Artifact)
      uses: actions/download-artifact@v2
      with:
        name: openwrt-imagebuilder-${{ needs.build.outputs.build_target }}-${{ matrix.repo.name }}-${{ matrix.repo.branch }}
        # 用前面job的输出会和本次对不上，用变量名才对 openwrt-imagebuilder-${{ env.DEVICE_NAME }}-${{ matrix.repo.name }}-${{ matrix.repo.branch }}
        #name: ${{ needs.build.outputs.imageBuilder }}
        path: .

    - name: Compile the firmware
      id: compile
      run: |
        ls -l
        #\cp -a ${GITHUB_WORKSPACE}/build/${{ needs.build.outputs.build_target }}/* ${GITHUB_WORKSPACE}/build/common.buildinfo ${GITHUB_WORKSPACE}/
        tar xf openwrt-imagebuilder-*.tar.xz
        rm -f openwrt-imagebuilder-*.tar.xz
        ln -sf openwrt-imagebuilder-* openwrt
        cd openwrt-imagebuilder-*
        ls -l

        echo -e "$(nproc) thread compile"
        ls -1 packages/*.ipk | wc -l
        ls packages/

        > /tmp/log
        if [ "${{matrix.target}}" == 'slim' ];then
          mkdir -p files/local_feed && sudo mount --bind packages files/local_feed
          echo "suffix=-slim" >> $GITHUB_ENV
        else
          echo "suffix=-full" >> $GITHUB_ENV
        fi

        sed -i 's/luci-app-[^ ]*//g' include/target.mk $(find target/ -name Makefile)
        ls packages/*.ipk | xargs -n1 basename > package.list
        #PACKAGES=$(grep -v CONFIG_PACKAGE_luci-app ${GITHUB_WORKSPACE}/common/common.buildinfo | grep -Po '^CONFIG_PACKAGE_\K[^A-Z=]+(?==y)' | xargs -n1 -i grep -o {} package.list | sort -u | xargs echo )
        #extra_pkgs="luci-i18n-base-zh-cn luci-i18n-firewall-zh-cn luci-app-ttyd bash default-settings luci-app-docker -luci-app-ssr-plus -luci-app-samba"

        extra_pkgs=" -luci-app-ssr-plus -luci-app-samba"
        if [ "${{matrix.target}}" == 'slim' ];then
          extra_pkgs+=' -luci-app-docker '
          PACKAGES=$( grep -Po '^CONFIG_PACKAGE_\K[^A-Z=]+' ${GITHUB_WORKSPACE}/common/common.buildinfo | tr '\n' ' ' )
        else
          PACKAGES=$( grep -Po '^CONFIG_PACKAGE_\K[^A-Z=]+(?==y)' full.buildinfo | xargs -n1 -i grep -o {} package.list | awk '!a[$0]++' | xargs echo )
          # 存在 docker.buildinfo 就安装docker
          [ -f docker.buildinfo ] && extra_pkgs+=' luci-app-dockerman'
        fi
        make image PACKAGES="$PACKAGES ${extra_pkgs} " FILES="files" |& tee -a /tmp/log
        REMOVE_PKGS=$( grep -Po 'Cannot install package \K[^.]+' /tmp/log | awk '{printf "-%s ",$0}' )
        if [ -n "$REMOVE_PKGS" ];then
          echo "打包报错，以下包存在依赖问题: ${REMOVE_PKGS}"
          echo "尝试移除上面的包打包"
          # 不删除则会文件已存在而不更新签名，貌似这样也解决不了。。,后面改 sed -ri '/check_signature/s@^[^#]@#&@' /etc/opkg.conf 暂时屏蔽前面错误
          rm -f files/local_feed/Packages*
          make image PACKAGES="$PACKAGES ${extra_pkgs} ${REMOVE_PKGS}" FILES="files"
        fi

        #make image -j$(nproc) PACKAGES='-luci-app-ipsec-vpnd' || make image -j1 V=s PACKAGES='-luci-app-ipsec-vpnd' 

        echo "::set-output name=status::success"
      
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt-imagebuilder-*/bin/targets/*/*
        pwd
        ls -lh
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Do something after Compile
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt-imagebuilder-*/
        if [ -f "$GITHUB_WORKSPACE/$DIY_AFTER" ];then
          bash $GITHUB_WORKSPACE/$DIY_AFTER ${{ matrix.repo.name }}-${{ matrix.repo.branch }} ${{ env.suffix }} 
        fi

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware-${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}${{ env.suffix }}-${{ matrix.repo.name }}-${{ matrix.repo.branch }}
        path: |
          ${{ env.FIRMWARE }}

    - name: Upload firmware to release
      if: steps.init.outputs.gh == 'success' && !cancelled()
      run: |
        set -x
        cd openwrt-imagebuilder-*/bin/targets/*/*
        [ -z "$firmware_wildcard" ] && firmware_wildcard=${{ needs.build.outputs.build_target }}

        prename -v "s#^.+${firmware_wildcard}#${{ matrix.repo.name }}-${{ matrix.repo.branch }}-${{ needs.build.outputs.build_target }}${suffix}#" *${firmware_wildcard}*
        mv sha256sums ${{ matrix.repo.name }}-${{ matrix.repo.branch }}-${{ needs.build.outputs.build_target }}${suffix}-sha256sums
        [ -f profiles.json ] && mv profiles.json ${{ matrix.repo.name }}-${{ matrix.repo.branch }}-${{ needs.build.outputs.build_target }}${suffix}-profiles.json
        ls -l
        [ "${GITHUB_REF##*/}" = 'main' ] && tag=latest || tag=test
        gh release -R ${GITHUB_REPOSITORY} list | grep -Ew ${tag} || gh release -R ${GITHUB_REPOSITORY} create ${tag} -t '' -n ''
        gh release -R ${GITHUB_REPOSITORY} upload ${tag} * --clobber
        if [ "${{ github.event.inputs.os }}" = 'self-hosted' ];then
          gh auth logout 
        fi